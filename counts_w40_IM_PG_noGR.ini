output_root = cl_w40_mtr/IMPGw40z03_noGR_fnl_2p
# will be in the windows files 

#What to do
get_scalar_cls = T
get_vector_cls = F
get_tensor_cls = F
get_transfer = F

#if do_lensing then lens_potential_output_file contains the unlensed CMB and lensing potential power spectra
#and lensed CMB Cls (without tensors) are in lensed_output_file, total in lensed_total_output_file. 
do_lensing = F

# 0: linear, 1: non-linear matter power (HALOFIT), 2: non-linear CMB lensing (HALOFIT), 
# 3: both non-linear matter power and CMB lensing (HALOFIT) 
do_nonlinear = 0

#Maximum multipole and k*eta. 
#  Note that C_ls near l_max are inaccurate (about 5%), go to 50 more than you need
#  Lensed power spectra are computed to l_max_scalar-100 
#  To get accurate lensed BB need to have l_max_scalar>2000, k_eta_max_scalar > 10000
#  To get accurate lensing potential you also need k_eta_max_scalar > 10000
#  Otherwise k_eta_max_scalar=2*l_max_scalar usually suffices, or don't set to use default
l_max_scalar = 500
#k_eta_max_scalar  = 4000

#  Tensor settings should be less than or equal to the above
l_max_tensor = 1500
k_eta_max_tensor = 3000

#Main cosmological parameters, neutrino masses are assumed degenerate
# If use_phyical set physical densities in baryons, CDM and neutrinos + Omega_k
use_physical = F
#ombh2          = 0.0226
#omch2          = 0.112
#omnuh2         = 0.00064
#omk            = 0
hubble = 67.74

#non-Gaussian corrections to the bias 
fNL = 2
normtrans = 19822000.0
#normtrans=T(k<k_lss)D(z=0); =1 if internally normalized. Needs to be determined for each cosmology 

#effective equation of state parameter for dark energy
w = -1
#constant comoving sound speed of the dark energy (1=quintessence)
cs2_lam = 1

#varying w is not supported by default, compile with EQUATIONS=equations_ppf to use crossing PPF w-wa model:
#wa             = 0
##if use_tabulated_w read (a,w) from the following user-supplied file instead of above
#use_tabulated_w = F
#wafile = wa.dat

#if use_physical = F set parameters as here
omega_baryon = 0.05
omega_cdm = 0.26
omega_lambda = 0.69
omega_neutrino = 0

temp_cmb = 2.726
helium_fraction = 0.249

#for share_delta_neff = T, the fractional part of massless_neutrinos gives the change in the effective number 
#(for QED + non-instantaneous decoupling)  i.e. the increase in neutrino temperature,
#so Neff = massless_neutrinos + sum(massive_neutrinos)
#For full neutrino parameter details see http://cosmologist.info/notes/CAMB.pdf
massless_neutrinos = 3.046

#number of distinct mass eigenstates
nu_mass_eigenstates = 1
#array of the integer number of physical neutrinos per eigenstate, e.g. massive_neutrinos = 2 1
massive_neutrinos = 0
#specify whether all neutrinos should have the same temperature, specified from fractional part of massless_neutrinos
share_delta_neff = F
#nu_mass_fractions specifies how Omeganu_h2 is shared between the eigenstates
#i.e. to indirectly specify the mass of each state; e.g. nu_mass_factions= 0.75 0.25
nu_mass_fractions = 1
#if share_delta_neff = F, specify explicitly the degeneracy for each state (e.g. for sterile with different temperature to active)
#(massless_neutrinos must be set to degeneracy for massless, i.e. massless_neutrinos does then not include Deleta_Neff from massive)
#if share_delta_neff=T then degeneracies is not given and set internally
#e.g. for massive_neutrinos = 2 1, this gives equal temperature to 4 neutrinos: nu_mass_degeneracies = 2.030 1.015, massless_neutrinos = 1.015
nu_mass_degeneracies = ""

#Initial power spectrum, amplitude, spectral index and running. Pivot k in Mpc^{-1}.
initial_power_num = 1
pivot_scalar = 0.05
pivot_tensor = 0.05
scalar_amp(1) = 2.142e-09
scalar_spectral_index(1) = 0.9667
scalar_nrun(1) = 0
scalar_nrunrun(1) = 0
tensor_spectral_index(1) = 0
tensor_nrun(1) = 0
#Three parameterizations (1,2,3) for tensors, see http://cosmologist.info/notes/CAMB.pdf
tensor_parameterization = 1
#ratio is that of the initial tens/scal power spectrum amplitudes, depending on parameterization
#for tensor_parameterization == 1, P_T = initial_ratio*scalar_amp*(k/pivot_tensor)^tensor_spectral_index
#for tensor_parameterization == 2, P_T = initial_ratio*P_s(pivot_tensor)*(k/pivot_tensor)^tensor_spectral_index
#Note that for general pivot scales and indices, tensor_parameterization==2 has P_T depending on n_s
initial_ratio(1) = 0.1
#tensor_amp is used instead if tensor_parameterization == 3, P_T = tensor_amp *(k/pivot_tensor)^tensor_spectral_index
#tensor_amp(1)            = 4e-10

#note vector modes use the scalar settings above


#Reionization, ignored unless reionization = T, re_redshift measures where x_e=0.5
reionization = F

re_use_optical_depth = T
re_optical_depth = 0.066
#If re_use_optical_depth = F then use following, otherwise ignored
re_redshift = 8.8
#width of reionization transition. CMBFAST model was similar to re_delta_redshift~0.5.
re_delta_redshift = 1.5
#re_ionization_frac=-1 sets it to become fully ionized using Yhe to get helium contribution
#Otherwise x_e varies from 0 to re_ionization_frac
re_ionization_frac = -1

#Parameters for second reionization of helium
re_helium_redshift = 3.5
re_helium_delta_redshift = 0.5

#RECFAST 1.5.x recombination parameters;
RECFAST_fudge = 1.14
RECFAST_fudge_He = 0.86
RECFAST_Heswitch = 6
RECFAST_Hswitch = T

# CosmoMC parameters - compile with RECOMBINATION=cosmorec and link to CosmoMC to use these
#
# cosmorec_runmode== 0: CosmoMC run with diffusion
#                    1: CosmoMC run without diffusion
#                    2: RECFAST++ run (equivalent of the original RECFAST version)
#                    3: RECFAST++ run with correction function of Calumba & Thomas, 2010
#
# For 'cosmorec_accuracy' and 'cosmorec_fdm' see CosmoMC for explanation
#---------------------------------------------------------------------------------------
#cosmorec_runmode        = 0
#cosmorec_accuracy       = 0
#cosmorec_fdm            = 0

#Initial scalar perturbation mode (adiabatic=1, CDM iso=2, Baryon iso=3, 
# neutrino density iso =4, neutrino velocity iso = 5) 
initial_condition = 1
#If above is zero, use modes in the following (totally correlated) proportions
#Note: we assume all modes have the same initial power spectrum
initial_vector = -1 0 0 0 0

#For vector modes: 0 for regular (neutrino vorticity mode), 1 for magnetic
vector_mode = 0

#Normalization
COBE_normalize = F
##CMB_outputscale scales the output Culs
#To get MuK^2 set realistic initial amplitude (e.g. scalar_amp(1) = 2.3e-9 above) and
#otherwise for dimensionless transfer functions set scalar_amp(1)=1 and use
#CMB_outputscale = 1
CMB_outputscale = 7.42835025e12

#Transfer function settings, transfer_kmax=0.5 is enough for sigma_8
#transfer_k_per_logint=0 sets sensible non-even sampling; 
#transfer_k_per_logint=5 samples fixed spacing in log-k
#transfer_interp_matterpower =T produces matter power in regular interpolated grid in log k; 
# use transfer_interp_matterpower =F to output calculated values (e.g. for later interpolation)
transfer_high_precision = T
transfer_kmax = 10
transfer_k_per_logint = 0
transfer_num_redshifts = 1
transfer_interp_matterpower = F
transfer_redshift(1) = 0
transfer_filename(1) = transfer_out.dat
#Matter power spectrum output against k/h in units of h^{-3} Mpc^3
transfer_matterpower(1) = matterpower.dat

#which variable to use for defining the matter power spectrum and sigma8
#main choices are 2: CDM, 7: CDM+baryon+neutrino, 8: CDM+baryon, 9: CDM+baryon+neutrino+de perts
transfer_power_var = 7

#Output files not produced if blank. make camb_fits to use the FITS setting.
scalar_output_file = scalCls.dat
vector_output_file = vecCls.dat
tensor_output_file = tensCls.dat
total_output_file = totCls.dat
lensed_output_file = lensedCls.dat
lensed_total_output_file = lensedtotCls.dat
lens_potential_output_file = lenspotentialCls.dat
FITS_filename = scalCls.fits

#Bispectrum parameters if required; primordial is currently only local model (fnl=1)
#lensing is fairly quick, primordial takes several minutes on quad core
do_lensing_bispectrum = F
do_primordial_bispectrum = F

#1 for just temperature, 2 with E
bispectrum_nfields = 1
#set slice non-zero to output slice b_{bispectrum_slice_base_L L L+delta}
bispectrum_slice_base_L = 0
bispectrum_ndelta = 3
bispectrum_delta(1) = 0
bispectrum_delta(2) = 2
bispectrum_delta(3) = 4
#bispectrum_do_fisher estimates errors and correlations between bispectra
#note you need to compile with LAPACK and FISHER defined to use get the Fisher info
bispectrum_do_fisher = F
#Noise is in muK^2, e.g. 2e-4 roughly for Planck temperature
bispectrum_fisher_noise = 0
bispectrum_fisher_noise_pol = 0
bispectrum_fisher_fwhm_arcmin = 7
#Filename if you want to write full reduced bispectrum (at sampled values of l_1)
bispectrum_full_output_file = ""
bispectrum_full_output_sparse = F
#Export alpha_l(r), beta_l(r) for local non-Gaussianity
bispectrum_export_alpha_beta = F

##Optional parameters to control the computation speed,accuracy and feedback

#If feedback_level > 0 print out useful information computed about the model
feedback_level = 1

#whether to start output files with comment describing columns
output_file_headers = T

#write out various derived parameters
derived_parameters = T

# 1: curved correlation function, 2: flat correlation function, 3: inaccurate harmonic method
lensing_method = 1
accurate_BB = F


#massive_nu_approx: 0 - integrate distribution function
#                   1 - switch to series in velocity weight once non-relativistic
massive_nu_approx = 1

#Whether you are bothered about polarization. 
accurate_polarization = T

#Whether you are bothered about percent accuracy on EE from reionization
accurate_reionization = T

#whether or not to include neutrinos in the tensor evolution equations
do_tensor_neutrinos = T

#Whether to turn off small-scale late time radiation hierarchies (save time,v. accurate)
do_late_rad_truncation = T

#Which version of Halofit approximation to use (default currently Takahashi):
#1. original, 2. Bird et al. update, 3. (1) plus fudge from http://www.roe.ac.uk/~jap/haloes/, 4. Takahashi
halofit_version = ""

#Computation parameters
#if number_of_threads=0 assigned automatically
number_of_threads = 0

#Default scalar accuracy is about 0.3% (except lensed BB) if high_accuracy_default=F
#If high_accuracy_default=T the default target accuracy is 0.1% at L>600 (with boost parameter=1 below)
#Try accuracy_boost=2, l_accuracy_boost=2 if you want to check stability/even higher accuracy
#Note increasing accuracy_boost parameters is very inefficient if you want higher accuracy,
#but high_accuracy_default is efficient 

high_accuracy_default = T

#Increase accuracy_boost to decrease time steps, use more k values, etc.
#Decrease to speed up at cost of worse accuracy. Suggest 0.8 to 3.
accuracy_boost = 1

#Larger to keep more terms in the hierarchy evolution. 
l_accuracy_boost = 1

#Increase to use more C_l values for interpolation.
#Increasing a bit will improve the polarization accuracy at l up to 200 -
#interpolation errors may be up to 3%
#Decrease to speed up non-flat models a bit
l_sample_boost = 1

#angular power terms
want_CMB = F
want_CMB_lensing = F


limber_windows = F
#output 21cm spectra in mK (rather than dimensionless)
use_mK = T

### 21cm ###
line_basic = F
line_distortions = F
line_extra = F
line_phot_quadrupole = F
line_phot_dipole = F
line_reionization = F

#### number counts ####
#whether spectra include lensing effect
DoRedshiftLensing = T

counts_density = T
counts_redshift = T
counts_radial = F
counts_timedelay = F
counts_ISW = F
counts_velocity = F
counts_potential = F

#counts_evolve =T allows for non-constant comoving source density
#uses function counts_background_z in modules_redshift space;
#if T by default assumes window includes all sources; if F then assumes constant comoving source density
counts_evolve = T


#if true, get accurate gas temperature evolution given recombination model including
#approximate perturbed recombination; also affects baryons for k >~ 300/Mpc.
evolve_delta_xe = F

#Whether transfer functions are 21cm (monopole and velocity), or standard
Do21cm = F

#Whether to compute 21cm C_l from transfer functions for sharp redshift window
#using only monopole source and redshift distortions
transfer_21cm_cl = F

#windows
num_redshiftwindows = 40

redshift(1) = 0.16
redshift_kind(1) = counts
redshift_wintype(1) = gaussian
redshift_dNdz(1) = im
redshift_sigma(1) = 0.16
redshift_bias(1) = 0.697
redshift_dlog10Ndm(1) = 0.4
redshift(2) = 0.369
redshift_kind(2) = counts
redshift_wintype(2) = gaussian
redshift_dNdz(2) = im
redshift_sigma(2) = 0.049
redshift_bias(2) = 0.732
redshift_dlog10Ndm(2) = 0.4
redshift(3) = 0.456
redshift_kind(3) = counts
redshift_wintype(3) = gaussian
redshift_dNdz(3) = im
redshift_sigma(3) = 0.038
redshift_bias(3) = 0.75
redshift_dlog10Ndm(3) = 0.4
redshift(4) = 0.527
redshift_kind(4) = counts
redshift_wintype(4) = gaussian
redshift_dNdz(4) = im
redshift_sigma(4) = 0.033
redshift_bias(4) = 0.765
redshift_dlog10Ndm(4) = 0.4
redshift(5) = 0.59
redshift_kind(5) = counts
redshift_wintype(5) = gaussian
redshift_dNdz(5) = im
redshift_sigma(5) = 0.03
redshift_bias(5) = 0.779
redshift_dlog10Ndm(5) = 0.4
redshift(6) = 0.649
redshift_kind(6) = counts
redshift_wintype(6) = gaussian
redshift_dNdz(6) = im
redshift_sigma(6) = 0.029
redshift_bias(6) = 0.793
redshift_dlog10Ndm(6) = 0.4
redshift(7) = 0.706
redshift_kind(7) = counts
redshift_wintype(7) = gaussian
redshift_dNdz(7) = im
redshift_sigma(7) = 0.028
redshift_bias(7) = 0.807
redshift_dlog10Ndm(7) = 0.4
redshift(8) = 0.762
redshift_kind(8) = counts
redshift_wintype(8) = gaussian
redshift_dNdz(8) = im
redshift_sigma(8) = 0.027
redshift_bias(8) = 0.821
redshift_dlog10Ndm(8) = 0.4
redshift(9) = 0.817
redshift_kind(9) = counts
redshift_wintype(9) = gaussian
redshift_dNdz(9) = im
redshift_sigma(9) = 0.028
redshift_bias(9) = 0.836
redshift_dlog10Ndm(9) = 0.4
redshift(10) = 0.873
redshift_kind(10) = counts
redshift_wintype(10) = gaussian
redshift_dNdz(10) = im
redshift_sigma(10) = 0.028
redshift_bias(10) = 0.851
redshift_dlog10Ndm(10) = 0.4
redshift(11) = 0.93
redshift_kind(11) = counts
redshift_wintype(11) = gaussian
redshift_dNdz(11) = im
redshift_sigma(11) = 0.029
redshift_bias(11) = 0.866
redshift_dlog10Ndm(11) = 0.4
redshift(12) = 0.99
redshift_kind(12) = counts
redshift_wintype(12) = gaussian
redshift_dNdz(12) = im
redshift_sigma(12) = 0.03
redshift_bias(12) = 0.883
redshift_dlog10Ndm(12) = 0.4
redshift(13) = 1.053
redshift_kind(13) = counts
redshift_wintype(13) = gaussian
redshift_dNdz(13) = im
redshift_sigma(13) = 0.032
redshift_bias(13) = 0.901
redshift_dlog10Ndm(13) = 0.4
redshift(14) = 1.12
redshift_kind(14) = counts
redshift_wintype(14) = gaussian
redshift_dNdz(14) = im
redshift_sigma(14) = 0.035
redshift_bias(14) = 0.921
redshift_dlog10Ndm(14) = 0.4
redshift(15) = 1.194
redshift_kind(15) = counts
redshift_wintype(15) = gaussian
redshift_dNdz(15) = im
redshift_sigma(15) = 0.039
redshift_bias(15) = 0.943
redshift_dlog10Ndm(15) = 0.4
redshift(16) = 1.278
redshift_kind(16) = counts
redshift_wintype(16) = gaussian
redshift_dNdz(16) = im
redshift_sigma(16) = 0.045
redshift_bias(16) = 0.969
redshift_dlog10Ndm(16) = 0.4
redshift(17) = 1.378
redshift_kind(17) = counts
redshift_wintype(17) = gaussian
redshift_dNdz(17) = im
redshift_sigma(17) = 0.054
redshift_bias(17) = 1.001
redshift_dlog10Ndm(17) = 0.4
redshift(18) = 1.503
redshift_kind(18) = counts
redshift_wintype(18) = gaussian
redshift_dNdz(18) = im
redshift_sigma(18) = 0.071
redshift_bias(18) = 1.043
redshift_dlog10Ndm(18) = 0.4
redshift(19) = 1.684
redshift_kind(19) = counts
redshift_wintype(19) = gaussian
redshift_dNdz(19) = im
redshift_sigma(19) = 0.11
redshift_bias(19) = 1.107
redshift_dlog10Ndm(19) = 0.4
redshift(20) = 2.309
redshift_kind(20) = counts
redshift_wintype(20) = gaussian
redshift_dNdz(20) = im
redshift_sigma(20) = 0.515
redshift_bias(20) = 1.352
redshift_dlog10Ndm(20) = 0.4
redshift(21) = 0.16
redshift_kind(21) = counts
redshift_wintype(21) = gaussian
redshift_dNdz(21) = euclid
redshift_sigma(21) = 0.16
redshift_bias(21) = 1.077
redshift_dlog10Ndm(21) = 0.152
redshift(22) = 0.369
redshift_kind(22) = counts
redshift_wintype(22) = gaussian
redshift_dNdz(22) = euclid
redshift_sigma(22) = 0.049
redshift_bias(22) = 1.17
redshift_dlog10Ndm(22) = 0.194
redshift(23) = 0.456
redshift_kind(23) = counts
redshift_wintype(23) = gaussian
redshift_dNdz(23) = euclid
redshift_sigma(23) = 0.038
redshift_bias(23) = 1.207
redshift_dlog10Ndm(23) = 0.212
redshift(24) = 0.527
redshift_kind(24) = counts
redshift_wintype(24) = gaussian
redshift_dNdz(24) = euclid
redshift_sigma(24) = 0.033
redshift_bias(24) = 1.236
redshift_dlog10Ndm(24) = 0.228
redshift(25) = 0.59
redshift_kind(25) = counts
redshift_wintype(25) = gaussian
redshift_dNdz(25) = euclid
redshift_sigma(25) = 0.03
redshift_bias(25) = 1.261
redshift_dlog10Ndm(25) = 0.242
redshift(26) = 0.649
redshift_kind(26) = counts
redshift_wintype(26) = gaussian
redshift_dNdz(26) = euclid
redshift_sigma(26) = 0.029
redshift_bias(26) = 1.284
redshift_dlog10Ndm(26) = 0.257
redshift(27) = 0.706
redshift_kind(27) = counts
redshift_wintype(27) = gaussian
redshift_dNdz(27) = euclid
redshift_sigma(27) = 0.028
redshift_bias(27) = 1.306
redshift_dlog10Ndm(27) = 0.272
redshift(28) = 0.762
redshift_kind(28) = counts
redshift_wintype(28) = gaussian
redshift_dNdz(28) = euclid
redshift_sigma(28) = 0.027
redshift_bias(28) = 1.327
redshift_dlog10Ndm(28) = 0.288
redshift(29) = 0.817
redshift_kind(29) = counts
redshift_wintype(29) = gaussian
redshift_dNdz(29) = euclid
redshift_sigma(29) = 0.028
redshift_bias(29) = 1.348
redshift_dlog10Ndm(29) = 0.304
redshift(30) = 0.873
redshift_kind(30) = counts
redshift_wintype(30) = gaussian
redshift_dNdz(30) = euclid
redshift_sigma(30) = 0.028
redshift_bias(30) = 1.369
redshift_dlog10Ndm(30) = 0.322
redshift(31) = 0.93
redshift_kind(31) = counts
redshift_wintype(31) = gaussian
redshift_dNdz(31) = euclid
redshift_sigma(31) = 0.029
redshift_bias(31) = 1.389
redshift_dlog10Ndm(31) = 0.342
redshift(32) = 0.99
redshift_kind(32) = counts
redshift_wintype(32) = gaussian
redshift_dNdz(32) = euclid
redshift_sigma(32) = 0.03
redshift_bias(32) = 1.411
redshift_dlog10Ndm(32) = 0.364
redshift(33) = 1.053
redshift_kind(33) = counts
redshift_wintype(33) = gaussian
redshift_dNdz(33) = euclid
redshift_sigma(33) = 0.032
redshift_bias(33) = 1.433
redshift_dlog10Ndm(33) = 0.389
redshift(34) = 1.12
redshift_kind(34) = counts
redshift_wintype(34) = gaussian
redshift_dNdz(34) = euclid
redshift_sigma(34) = 0.035
redshift_bias(34) = 1.456
redshift_dlog10Ndm(34) = 0.418
redshift(35) = 1.194
redshift_kind(35) = counts
redshift_wintype(35) = gaussian
redshift_dNdz(35) = euclid
redshift_sigma(35) = 0.039
redshift_bias(35) = 1.481
redshift_dlog10Ndm(35) = 0.453
redshift(36) = 1.278
redshift_kind(36) = counts
redshift_wintype(36) = gaussian
redshift_dNdz(36) = euclid
redshift_sigma(36) = 0.045
redshift_bias(36) = 1.509
redshift_dlog10Ndm(36) = 0.496
redshift(37) = 1.378
redshift_kind(37) = counts
redshift_wintype(37) = gaussian
redshift_dNdz(37) = euclid
redshift_sigma(37) = 0.054
redshift_bias(37) = 1.542
redshift_dlog10Ndm(37) = 0.554
redshift(38) = 1.503
redshift_kind(38) = counts
redshift_wintype(38) = gaussian
redshift_dNdz(38) = euclid
redshift_sigma(38) = 0.071
redshift_bias(38) = 1.582
redshift_dlog10Ndm(38) = 0.637
redshift(39) = 1.684
redshift_kind(39) = counts
redshift_wintype(39) = gaussian
redshift_dNdz(39) = euclid
redshift_sigma(39) = 0.11
redshift_bias(39) = 1.638
redshift_dlog10Ndm(39) = 0.779
redshift(40) = 2.309
redshift_kind(40) = counts
redshift_wintype(40) = gaussian
redshift_dNdz(40) = euclid
redshift_sigma(40) = 0.515
redshift_bias(40) = 1.819
redshift_dlog10Ndm(40) = 1.521
